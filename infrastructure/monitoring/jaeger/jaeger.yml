# Jaeger configuration for distributed tracing
# This configuration sets up Jaeger with appropriate storage and collector settings

# Extensions configuration
extensions:
  health_check:
    endpoint: 0.0.0.0:14269
  
  pprof:
    endpoint: 0.0.0.0:1777

# Receivers configuration
receivers:
  # OTLP receiver for traces from OpenTelemetry
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://localhost:*"
            - "http://envoy:*"

  # Jaeger receiver for legacy Jaeger clients
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
      thrift_compact:
        endpoint: 0.0.0.0:6831
      thrift_binary:
        endpoint: 0.0.0.0:6832

  # Zipkin receiver for Zipkin-compatible traces
  zipkin:
    endpoint: 0.0.0.0:9411

# Processors configuration
processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s

  # Resource processor to add service metadata
  resource:
    attributes:
      - key: service.namespace
        value: rocket-science
        action: upsert
      - key: deployment.environment
        value: development
        action: upsert

  # Span processor for trace enhancement
  span:
    name:
      to_attributes:
        rules:
          - ^\/api\/orders\/(?P<order_id>.*)$
          - ^\/api\/users\/(?P<user_id>.*)$
          - ^\/grpc\.(?P<grpc_service>.*)\/(?P<grpc_method>.*)$

# Exporters configuration
exporters:
  # Jaeger exporter for storage
  jaeger:
    endpoint: localhost:14250
    tls:
      insecure: true

  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

# Service configuration
service:
  extensions: [health_check, pprof]
  
  pipelines:
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, resource, span, batch]
      exporters: [jaeger, logging]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888

# Jaeger specific configuration
jaeger:
  # Storage configuration
  storage:
    type: memory
    # For production, use Elasticsearch or Cassandra
    # elasticsearch:
    #   server-urls: http://elasticsearch:9200
    #   index-prefix: jaeger
    #   create-index-templates: true
    
    # Memory storage configuration
    memory:
      max-traces: 50000

  # Collector configuration
  collector:
    # HTTP server configuration
    http-server:
      host-port: 0.0.0.0:14268
      
    # gRPC server configuration  
    grpc-server:
      host-port: 0.0.0.0:14250

  # Query service configuration
  query:
    # HTTP server configuration
    http-server:
      host-port: 0.0.0.0:16686
      
    # Additional query options
    additional-headers:
      - "Access-Control-Allow-Origin: *"
      - "Access-Control-Allow-Methods: GET, POST, OPTIONS"
      - "Access-Control-Allow-Headers: Content-Type, Authorization"

  # Agent configuration (if using Jaeger agent)
  agent:
    # HTTP server configuration
    http-server:
      host-port: 0.0.0.0:5778
      
    # gRPC server configuration
    grpc-server:
      host-port: 0.0.0.0:14250
      
    # Compact Thrift server configuration
    compact:
      server-host-port: 0.0.0.0:6831
      
    # Binary Thrift server configuration  
    binary:
      server-host-port: 0.0.0.0:6832

# Sampling configuration
sampling:
  # Default sampling strategy
  default_strategy:
    type: probabilistic
    param: 0.1  # Sample 10% of traces
    
  # Per-service sampling strategies
  per_service_strategies:
    - service: "order-service"
      type: probabilistic
      param: 0.5  # Sample 50% of order service traces
      
    - service: "iam-service"
      type: probabilistic
      param: 0.2  # Sample 20% of IAM service traces
      
    - service: "payment-service"
      type: probabilistic
      param: 1.0  # Sample 100% of payment service traces (critical)
      
    - service: "inventory-service"
      type: probabilistic
      param: 0.3  # Sample 30% of inventory service traces
      
    - service: "assembly-service"
      type: probabilistic
      param: 0.1  # Sample 10% of assembly service traces
      
    - service: "notification-service"
      type: probabilistic
      param: 0.1  # Sample 10% of notification service traces
