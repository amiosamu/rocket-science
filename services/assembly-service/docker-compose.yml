version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: assembly-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rocket-net

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: assembly-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rocket-net

  # Kafka UI for development/debugging
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: assembly-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - rocket-net

  # Redis for caching/session storage (if needed)
  redis:
    image: redis:7-alpine
    container_name: assembly-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rocket-net

  # Assembly Service
  assembly-service:
    build:
      context: ../../
      dockerfile: services/assembly-service/Dockerfile
      args:
        VERSION: ${VERSION:-dev}
        BUILD_TIME: ${BUILD_TIME:-unknown}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
    container_name: assembly-service
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      # Service configuration
      ENVIRONMENT: development
      PORT: 8083
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      GRACEFUL_TIMEOUT: 30s
      
      # Kafka configuration
      KAFKA_BROKERS: kafka:29092
      KAFKA_CONSUMER_GROUP_ID: assembly-service-group
      KAFKA_CONSUMER_CLIENT_ID: assembly-service-consumer
      KAFKA_PRODUCER_CLIENT_ID: assembly-service-producer
      KAFKA_TOPIC_PAYMENT_PROCESSED: payment.processed
      KAFKA_TOPIC_ASSEMBLY_STARTED: assembly.started
      KAFKA_TOPIC_ASSEMBLY_COMPLETED: assembly.completed
      KAFKA_TOPIC_ASSEMBLY_FAILED: assembly.failed
      KAFKA_INITIAL_OFFSET: newest
      KAFKA_ENABLE_AUTO_COMMIT: 'true'
      KAFKA_AUTO_COMMIT_INTERVAL: 1s
      KAFKA_SESSION_TIMEOUT: 30s
      KAFKA_HEARTBEAT_INTERVAL: 3s
      KAFKA_MAX_PROCESSING_TIME: 30s
      KAFKA_CONCURRENCY_LEVEL: 1
      KAFKA_RETRY_ATTEMPTS: 3
      KAFKA_RETRY_BACKOFF: 1s
      KAFKA_ENABLE_DEAD_LETTER: 'true'
      KAFKA_DEAD_LETTER_TOPIC: assembly.dead-letter
      
      # Assembly configuration
      ASSEMBLY_SIMULATION_DURATION: ${ASSEMBLY_DURATION:-10s}
      ASSEMBLY_MAX_CONCURRENT: ${ASSEMBLY_MAX_CONCURRENT:-10}
      ASSEMBLY_FAILURE_RATE: ${ASSEMBLY_FAILURE_RATE:-0.05}
      ASSEMBLY_QUALITY_THRESHOLD: 80
      
      # Metrics configuration
      METRICS_ENABLED: 'true'
      METRICS_PORT: 9090
      METRICS_PATH: /metrics
      METRICS_NAMESPACE: assembly_service
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - rocket-net
    labels:
      - "rocket.service=assembly"
      - "rocket.environment=${ENVIRONMENT:-development}"

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: assembly-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - rocket-net

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: assembly-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rocket-net

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  rocket-net:
    driver: bridge
    name: rocket-network 