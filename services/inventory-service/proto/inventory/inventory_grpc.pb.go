// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/inventory/inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CheckAvailability_FullMethodName  = "/inventory.v1.InventoryService/CheckAvailability"
	InventoryService_ReserveItems_FullMethodName       = "/inventory.v1.InventoryService/ReserveItems"
	InventoryService_ConfirmReservation_FullMethodName = "/inventory.v1.InventoryService/ConfirmReservation"
	InventoryService_ReleaseReservation_FullMethodName = "/inventory.v1.InventoryService/ReleaseReservation"
	InventoryService_GetItem_FullMethodName            = "/inventory.v1.InventoryService/GetItem"
	InventoryService_SearchItems_FullMethodName        = "/inventory.v1.InventoryService/SearchItems"
	InventoryService_GetLowStockItems_FullMethodName   = "/inventory.v1.InventoryService/GetLowStockItems"
	InventoryService_UpdateStock_FullMethodName        = "/inventory.v1.InventoryService/UpdateStock"
	InventoryService_GetItemsByCategory_FullMethodName = "/inventory.v1.InventoryService/GetItemsByCategory"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InventoryService manages rocket parts inventory and stock reservations
type InventoryServiceClient interface {
	// CheckAvailability verifies if requested items are available in stock
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
	// ReserveItems creates reservations for items in an order
	ReserveItems(ctx context.Context, in *ReserveItemsRequest, opts ...grpc.CallOption) (*ReserveItemsResponse, error)
	// ConfirmReservation confirms reserved items (after payment success)
	ConfirmReservation(ctx context.Context, in *ConfirmReservationRequest, opts ...grpc.CallOption) (*ConfirmReservationResponse, error)
	// ReleaseReservation releases reserved items (if payment fails)
	ReleaseReservation(ctx context.Context, in *ReleaseReservationRequest, opts ...grpc.CallOption) (*ReleaseReservationResponse, error)
	// GetItem retrieves details of a specific inventory item
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	// SearchItems searches for items by name, SKU, or category
	SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*SearchItemsResponse, error)
	// GetLowStockItems retrieves items below minimum stock threshold
	GetLowStockItems(ctx context.Context, in *GetLowStockItemsRequest, opts ...grpc.CallOption) (*GetLowStockItemsResponse, error)
	// UpdateStock adds or removes stock (admin operation)
	UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockResponse, error)
	// GetItemsByCategory retrieves items in a specific category
	GetItemsByCategory(ctx context.Context, in *GetItemsByCategoryRequest, opts ...grpc.CallOption) (*GetItemsByCategoryResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReserveItems(ctx context.Context, in *ReserveItemsRequest, opts ...grpc.CallOption) (*ReserveItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReserveItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConfirmReservation(ctx context.Context, in *ConfirmReservationRequest, opts ...grpc.CallOption) (*ConfirmReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmReservationResponse)
	err := c.cc.Invoke(ctx, InventoryService_ConfirmReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReleaseReservation(ctx context.Context, in *ReleaseReservationRequest, opts ...grpc.CallOption) (*ReleaseReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseReservationResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReleaseReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*SearchItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetLowStockItems(ctx context.Context, in *GetLowStockItemsRequest, opts ...grpc.CallOption) (*GetLowStockItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLowStockItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetLowStockItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateStock(ctx context.Context, in *UpdateStockRequest, opts ...grpc.CallOption) (*UpdateStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStockResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetItemsByCategory(ctx context.Context, in *GetItemsByCategoryRequest, opts ...grpc.CallOption) (*GetItemsByCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsByCategoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetItemsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
//
// InventoryService manages rocket parts inventory and stock reservations
type InventoryServiceServer interface {
	// CheckAvailability verifies if requested items are available in stock
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	// ReserveItems creates reservations for items in an order
	ReserveItems(context.Context, *ReserveItemsRequest) (*ReserveItemsResponse, error)
	// ConfirmReservation confirms reserved items (after payment success)
	ConfirmReservation(context.Context, *ConfirmReservationRequest) (*ConfirmReservationResponse, error)
	// ReleaseReservation releases reserved items (if payment fails)
	ReleaseReservation(context.Context, *ReleaseReservationRequest) (*ReleaseReservationResponse, error)
	// GetItem retrieves details of a specific inventory item
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	// SearchItems searches for items by name, SKU, or category
	SearchItems(context.Context, *SearchItemsRequest) (*SearchItemsResponse, error)
	// GetLowStockItems retrieves items below minimum stock threshold
	GetLowStockItems(context.Context, *GetLowStockItemsRequest) (*GetLowStockItemsResponse, error)
	// UpdateStock adds or removes stock (admin operation)
	UpdateStock(context.Context, *UpdateStockRequest) (*UpdateStockResponse, error)
	// GetItemsByCategory retrieves items in a specific category
	GetItemsByCategory(context.Context, *GetItemsByCategoryRequest) (*GetItemsByCategoryResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedInventoryServiceServer) ReserveItems(context.Context, *ReserveItemsRequest) (*ReserveItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveItems not implemented")
}
func (UnimplementedInventoryServiceServer) ConfirmReservation(context.Context, *ConfirmReservationRequest) (*ConfirmReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReservation not implemented")
}
func (UnimplementedInventoryServiceServer) ReleaseReservation(context.Context, *ReleaseReservationRequest) (*ReleaseReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReservation not implemented")
}
func (UnimplementedInventoryServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedInventoryServiceServer) SearchItems(context.Context, *SearchItemsRequest) (*SearchItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetLowStockItems(context.Context, *GetLowStockItemsRequest) (*GetLowStockItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLowStockItems not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateStock(context.Context, *UpdateStockRequest) (*UpdateStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedInventoryServiceServer) GetItemsByCategory(context.Context, *GetItemsByCategoryRequest) (*GetItemsByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategory not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReserveItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReserveItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReserveItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReserveItems(ctx, req.(*ReserveItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConfirmReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConfirmReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ConfirmReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConfirmReservation(ctx, req.(*ConfirmReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReleaseReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReleaseReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReleaseReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReleaseReservation(ctx, req.(*ReleaseReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).SearchItems(ctx, req.(*SearchItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetLowStockItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLowStockItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetLowStockItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetLowStockItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetLowStockItems(ctx, req.(*GetLowStockItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateStock(ctx, req.(*UpdateStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetItemsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItemsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetItemsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItemsByCategory(ctx, req.(*GetItemsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvailability",
			Handler:    _InventoryService_CheckAvailability_Handler,
		},
		{
			MethodName: "ReserveItems",
			Handler:    _InventoryService_ReserveItems_Handler,
		},
		{
			MethodName: "ConfirmReservation",
			Handler:    _InventoryService_ConfirmReservation_Handler,
		},
		{
			MethodName: "ReleaseReservation",
			Handler:    _InventoryService_ReleaseReservation_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _InventoryService_GetItem_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _InventoryService_SearchItems_Handler,
		},
		{
			MethodName: "GetLowStockItems",
			Handler:    _InventoryService_GetLowStockItems_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _InventoryService_UpdateStock_Handler,
		},
		{
			MethodName: "GetItemsByCategory",
			Handler:    _InventoryService_GetItemsByCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inventory/inventory.proto",
}
