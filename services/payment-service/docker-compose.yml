# Payment Service Docker Compose
# For local development and testing

version: '3.8'

services:
  # Payment Service - Production Build
  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        VERSION: 1.0.0
        BUILD_TIME: ${BUILD_TIME:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
    container_name: payment-service
    ports:
      - "50052:50052"  # gRPC port
    environment:
      - PAYMENT_SERVICE_PORT=50052
      - LOG_LEVEL=info
      - ENVIRONMENT=docker
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
      - SERVICE_NAME=payment-service
      - SERVICE_VERSION=1.0.0
      - PAYMENT_SUCCESS_RATE=0.95
      - PAYMENT_MAX_AMOUNT=1000000.0
      - PAYMENT_PROCESSING_TIME_MS=500
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - payment-network

  # Payment Service - Development Mode with Hot Reload
  payment-service-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: payment-service-dev
    ports:
      - "50053:50052"  # gRPC port (different from prod)
      - "40000:40000"  # Debug port
    environment:
      - PAYMENT_SERVICE_PORT=50052
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - METRICS_ENABLED=true
      - TRACING_ENABLED=true
      - SERVICE_NAME=payment-service-dev
      - SERVICE_VERSION=1.0.0-dev
      - PAYMENT_SUCCESS_RATE=1.0  # Always succeed in dev
      - PAYMENT_MAX_AMOUNT=1000000.0
      - PAYMENT_PROCESSING_TIME_MS=100  # Faster in dev
    volumes:
      - .:/app
      - /app/vendor  # Anonymous volume for vendor directory
    working_dir: /app
    networks:
      - payment-network
    profiles:
      - development

  # gRPC UI for testing (optional)
  grpcui:
    image: fullstorydev/grpcui:latest
    container_name: payment-grpcui
    ports:
      - "8080:8080"
    command: 
      - -plaintext
      - -bind=0.0.0.0
      - -port=8080
      - payment-service:50052
    depends_on:
      - payment-service
    networks:
      - payment-network
    profiles:
      - tools

  # gRPC Web Proxy (optional, for web clients)
  grpc-web-proxy:
    image: ghcr.io/improbable-eng/grpc-web:latest
    container_name: payment-grpc-web-proxy
    ports:
      - "8081:8081"
    command:
      - --backend_addr=payment-service:50052
      - --run_tls_server=false
      - --allow_all_origins
      - --server_bind_address=0.0.0.0
      - --server_http_debug_port=8081
    depends_on:
      - payment-service
    networks:
      - payment-network
    profiles:
      - tools

# Networks
networks:
  payment-network:
    driver: bridge
    name: payment-network

# Volumes (if needed)
volumes:
  go-modules:
    driver: local