syntax = "proto3";

package iam.v1;

option go_package = "github.com/amiosamu/rocket-science/services/iam-service/proto/iam";

import "google/protobuf/timestamp.proto";

// IAMService provides identity and access management functionality
service IAMService {
  // Authentication methods
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  
  // Session management
  rpc ValidateSession(ValidateSessionRequest) returns (ValidateSessionResponse);
  rpc GetSessionInfo(GetSessionInfoRequest) returns (GetSessionInfoResponse);
  rpc InvalidateSession(InvalidateSessionRequest) returns (InvalidateSessionResponse);
  
  // User management
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Profile management
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  
  // Authorization and permissions
  rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse);
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse);
  
  // For notification service integration
  rpc GetUserTelegramChatID(GetUserTelegramChatIDRequest) returns (GetUserTelegramChatIDResponse);
  rpc UpdateTelegramChatID(UpdateTelegramChatIDRequest) returns (UpdateTelegramChatIDResponse);
}

// Authentication Messages

message LoginRequest {
  string email = 1;
  string password = 2;
  string user_agent = 3;    // For session tracking
  string ip_address = 4;    // For security tracking
}

message LoginResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;   // JWT token for API access
  string refresh_token = 4;  // Token for refreshing access token
  string session_id = 5;     // Session identifier
  User user = 6;            // User information
  google.protobuf.Timestamp expires_at = 7;
}

message LogoutRequest {
  string session_id = 1;
  string access_token = 2;
}

message LogoutResponse {
  bool success = 1;
  string message = 2;
}

message RefreshTokenRequest {
  string refresh_token = 1;
  string session_id = 2;
}

message RefreshTokenResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  google.protobuf.Timestamp expires_at = 4;
}

// Session Management Messages

message ValidateSessionRequest {
  string session_id = 1;
  string access_token = 2;
}

message ValidateSessionResponse {
  bool valid = 1;
  string message = 2;
  User user = 3;            // User info if session is valid
  Session session = 4;      // Session details
}

message GetSessionInfoRequest {
  string session_id = 1;
}

message GetSessionInfoResponse {
  bool found = 1;
  Session session = 2;
  User user = 3;
}

message InvalidateSessionRequest {
  string session_id = 1;
  string reason = 2;        // Why session is being invalidated
}

message InvalidateSessionResponse {
  bool success = 1;
  string message = 2;
}

// User Management Messages

message CreateUserRequest {
  string email = 1;
  string password = 2;
  string first_name = 3;
  string last_name = 4;
  UserRole role = 5;
  map<string, string> metadata = 6;  // Additional user data
}

message CreateUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
  string user_id = 4;
}

message GetUserRequest {
  oneof identifier {
    string user_id = 1;
    string email = 2;
  }
}

message GetUserResponse {
  bool found = 1;
  User user = 2;
  string message = 3;
}

message UpdateUserRequest {
  string user_id = 1;
  optional string email = 2;
  optional string first_name = 3;
  optional string last_name = 4;
  optional UserRole role = 5;
  optional UserStatus status = 6;
  map<string, string> metadata = 7;
}

message UpdateUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

message DeleteUserRequest {
  string user_id = 1;
  string reason = 2;
}

message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

message ListUsersRequest {
  optional UserRole role_filter = 1;
  optional UserStatus status_filter = 2;
  int32 limit = 3;
  int32 offset = 4;
  string search_query = 5;   // Search by name or email
}

message ListUsersResponse {
  repeated User users = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

// Profile Management Messages

message GetProfileRequest {
  string user_id = 1;
}

message GetProfileResponse {
  bool found = 1;
  UserProfile profile = 2;
}

message UpdateProfileRequest {
  string user_id = 1;
  optional string first_name = 2;
  optional string last_name = 3;
  optional string phone = 4;
  optional string telegram_username = 5;
  map<string, string> preferences = 6;
}

message UpdateProfileResponse {
  bool success = 1;
  string message = 2;
  UserProfile profile = 3;
}

message ChangePasswordRequest {
  string user_id = 1;
  string current_password = 2;
  string new_password = 3;
}

message ChangePasswordResponse {
  bool success = 1;
  string message = 2;
}

// Authorization Messages

message CheckPermissionRequest {
  string user_id = 1;
  string resource = 2;      // e.g., "orders", "inventory", "admin"
  string action = 3;        // e.g., "read", "write", "delete"
}

message CheckPermissionResponse {
  bool allowed = 1;
  string message = 2;
  repeated string permissions = 3;  // All user permissions
}

message GetUserPermissionsRequest {
  string user_id = 1;
}

message GetUserPermissionsResponse {
  repeated string permissions = 1;
  UserRole role = 2;
}

// Telegram Integration Messages

message GetUserTelegramChatIDRequest {
  string user_id = 1;
}

message GetUserTelegramChatIDResponse {
  bool found = 1;
  string chat_id = 2;
  string telegram_username = 3;
}

message UpdateTelegramChatIDRequest {
  string user_id = 1;
  string chat_id = 2;
  string telegram_username = 3;
}

message UpdateTelegramChatIDResponse {
  bool success = 1;
  string message = 2;
}

// Data Models

message User {
  string id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  UserRole role = 5;
  UserStatus status = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  google.protobuf.Timestamp last_login_at = 9;
  map<string, string> metadata = 10;
}

message UserProfile {
  string user_id = 1;
  string first_name = 2;
  string last_name = 3;
  string email = 4;
  string phone = 5;
  string telegram_username = 6;
  string telegram_chat_id = 7;
  map<string, string> preferences = 8;
  google.protobuf.Timestamp updated_at = 9;
}

message Session {
  string id = 1;
  string user_id = 2;
  string access_token = 3;
  string refresh_token = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp expires_at = 6;
  google.protobuf.Timestamp last_accessed_at = 7;
  string ip_address = 8;
  string user_agent = 9;
  SessionStatus status = 10;
}

// Enums

enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;
  USER_ROLE_CUSTOMER = 1;      // Regular customers who place orders
  USER_ROLE_ADMIN = 2;         // System administrators
  USER_ROLE_OPERATOR = 3;      // Operations team (can manage orders/inventory)
  USER_ROLE_SUPPORT = 4;       // Customer support team
}

enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;      // Active user
  USER_STATUS_INACTIVE = 2;    // Temporarily disabled
  USER_STATUS_SUSPENDED = 3;   // Suspended due to violations
  USER_STATUS_DELETED = 4;     // Soft deleted
}

enum SessionStatus {
  SESSION_STATUS_UNSPECIFIED = 0;
  SESSION_STATUS_ACTIVE = 1;    // Active session
  SESSION_STATUS_EXPIRED = 2;   // Expired session
  SESSION_STATUS_REVOKED = 3;   // Manually revoked
  SESSION_STATUS_INVALID = 4;   // Invalid/corrupted session
}
