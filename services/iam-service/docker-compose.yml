version: '3.8'

services:
  # IAM Service
  iam-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iam-service
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_READ_TIMEOUT=30s
      - SERVER_WRITE_TIMEOUT=30s
      - SERVER_IDLE_TIMEOUT=120s
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=iam_db
      - DB_USER=iam_user
      - DB_PASSWORD=iam_password
      - DB_SSL_MODE=disable
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=25
      - DB_CONN_MAX_LIFETIME=5m
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_MAX_RETRIES=3
      - REDIS_POOL_SIZE=10
      - REDIS_MIN_IDLE_CONNS=5
      
      # JWT Configuration
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_ACCESS_TOKEN_DURATION=15m
      - JWT_REFRESH_TOKEN_DURATION=7d
      - JWT_ISSUER=iam-service
      
      # Security Configuration
      - BCRYPT_COST=12
      - MAX_LOGIN_ATTEMPTS=5
      - ACCOUNT_LOCKOUT_DURATION=30m
      - SESSION_TIMEOUT=24h
      
      # Observability Configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - METRICS_PORT=9090
      
      # Environment
      - ENV=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "./iam-service", "--health-check"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iam-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=iam_db
      - POSTGRES_USER=iam_user
      - POSTGRES_PASSWORD=iam_password
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - iam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iam_user -d iam_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iam-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - iam-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # PostgreSQL Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: iam-pgadmin
    ports:
      - "8081:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@iam.local
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - iam-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Admin (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: iam-redis-insight
    ports:
      - "8082:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - iam-network
    restart: unless-stopped
    depends_on:
      - redis

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: iam-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - iam-network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: iam-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - iam-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  iam-network:
    driver: bridge
    name: iam-network

volumes:
  postgres_data:
    name: iam-postgres-data
  redis_data:
    name: iam-redis-data
  pgadmin_data:
    name: iam-pgadmin-data
  redis_insight_data:
    name: iam-redis-insight-data
  prometheus_data:
    name: iam-prometheus-data
  grafana_data:
    name: iam-grafana-data 