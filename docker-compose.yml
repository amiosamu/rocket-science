version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: rocket-postgres
    environment:
      POSTGRES_DB: rocket_db
      POSTGRES_USER: rocket_user
      POSTGRES_PASSWORD: rocket_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/databases/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rocket_user -d rocket_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    container_name: rocket-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: inventory_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./infrastructure/databases/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rocket-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: rocket-kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Core Services
  iam-service:
    build:
      context: .
      dockerfile: ./services/iam-service/Dockerfile
    container_name: rocket-iam
    environment:
      - IAM_SERVER_HOST=0.0.0.0
      - IAM_SERVER_PORT=50051
      - IAM_DB_HOST=rocket-postgres
      - IAM_DB_PORT=5432
      - IAM_DB_USER=rocket_user
      - IAM_DB_PASSWORD=rocket_password
      - IAM_DB_NAME=rocket_iam
      - IAM_DB_SSL_MODE=disable
      - IAM_DB_MAX_OPEN_CONNS=25
      - IAM_DB_MAX_IDLE_CONNS=5
      - IAM_DB_CONN_MAX_LIFETIME=5m
      # Driver-level timeout configurations
      - IAM_DB_CONNECT_TIMEOUT=10s
      - IAM_DB_QUERY_TIMEOUT=10s
      - IAM_DB_READ_TIMEOUT=5s
      - IAM_DB_WRITE_TIMEOUT=5s
      - IAM_REDIS_HOST=rocket-redis
      - IAM_REDIS_PORT=6379
      - IAM_JWT_SECRET=super-secure-production-jwt-secret-key-for-rocket-science-platform-2025
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep '[i]am-service' > /dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3

  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventory-service/Dockerfile
    container_name: rocket-inventory
    environment:
      - INVENTORY_SERVER_PORT=8081
      - INVENTORY_DATABASE_CONNECTION_URL=mongodb://admin:admin123@mongodb:27017
      - INVENTORY_DATABASE_DATABASE_NAME=inventory_db
      - INVENTORY_IAM_CLIENT_HOST=iam-service
      - INVENTORY_IAM_CLIENT_PORT=8080
      - INVENTORY_LOG_LEVEL=info
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
      iam-service:
        condition: service_healthy
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service/Dockerfile
    container_name: rocket-payment
    environment:
      - PAYMENT_SERVER_PORT=8083
      - PAYMENT_PROCESSING_TIME_MS=1000
      - PAYMENT_SUCCESS_RATE=0.9
      - PAYMENT_LOG_LEVEL=info
    ports:
      - "8083:8083"
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: .
      dockerfile: ./services/order-service/Dockerfile
    container_name: rocket-order
    environment:
      - ORDER_SERVER_HOST=0.0.0.0
      - ORDER_SERVER_PORT=8085
      - ORDER_DATABASE_HOST=postgres
      - ORDER_DATABASE_PORT=5432
      - ORDER_DATABASE_USER=rocket_user
      - ORDER_DATABASE_PASSWORD=rocket_password
      - ORDER_DATABASE_DBNAME=rocket_db
      - ORDER_KAFKA_BROKERS=kafka:29092
      - ORDER_GRPC_INVENTORY_ADDRESS=inventory-service:8081
      - ORDER_GRPC_PAYMENT_ADDRESS=payment-service:8083
      - ORDER_LOG_LEVEL=info
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  assembly-service:
    build:
      context: .
      dockerfile: ./services/assembly-service/Dockerfile
    container_name: rocket-assembly
    environment:
      - ASSEMBLY_SERVICE_PORT=8086
      - ASSEMBLY_KAFKA_BROKERS=kafka:29092
      - ASSEMBLY_KAFKA_PAYMENT_TOPIC=payment-events
      - ASSEMBLY_KAFKA_ASSEMBLY_STARTED_TOPIC=assembly-started
      - ASSEMBLY_KAFKA_ASSEMBLY_COMPLETED_TOPIC=assembly-completed
      - ASSEMBLY_KAFKA_ASSEMBLY_FAILED_TOPIC=assembly-failed
      - ASSEMBLY_LOG_LEVEL=info
    ports:
      - "8086:8086"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: .
      dockerfile: ./services/notification-service/Dockerfile
    container_name: rocket-notification
    environment:
      - NOTIFICATION_SERVICE_PORT=8088
      - NOTIFICATION_KAFKA_BROKERS=kafka:29092
      - NOTIFICATION_TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - NOTIFICATION_IAM_CLIENT_HOST=iam-service
      - NOTIFICATION_IAM_CLIENT_PORT=8080
      - NOTIFICATION_LOG_LEVEL=info
    ports:
      - "8088:8088"
    depends_on:
      kafka:
        condition: service_healthy
      iam-service:
        condition: service_healthy
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8089/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  envoy:
    build:
      context: .
      dockerfile: ./infrastructure/envoy/Dockerfile
    container_name: rocket-envoy
    ports:
      - "80:8080"   # HTTP
      - "443:8443"  # HTTPS
    volumes:
      - ./infrastructure/envoy/envoy.yaml:/etc/envoy/envoy.yaml
      - ./infrastructure/envoy/lua:/etc/envoy/lua
    depends_on:
      - iam-service
      - order-service
      - inventory-service
      - payment-service
    networks:
      - rocket-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: rocket-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infrastructure/monitoring/otel-collector/otel-collector.yml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - rocket-network

  prometheus:
    image: prom/prometheus:latest
    container_name: rocket-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rocket-network

  grafana:
    image: grafana/grafana:latest
    container_name: rocket-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - rocket-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rocket-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14250:14250"
    networks:
      - rocket-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rocket-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - rocket-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: rocket-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - rocket-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  rocket-network:
    driver: bridge
